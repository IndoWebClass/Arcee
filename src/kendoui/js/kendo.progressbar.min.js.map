{"version":3,"file":"kendo.progressbar.min.js","sources":["kendo.progressbar.js"],"sourcesContent":["/*!\n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n\n*/\n(function(f, define){\n    define('kendo.progressbar',[ \"./kendo.core\" ], f);\n})(function(){\n\nvar __meta__ = { // jshint ignore:line\n    id: \"progressbar\",\n    name: \"ProgressBar\",\n    category: \"web\",\n    description: \"The ProgressBar offers rich functionality for displaying and tracking progress\",\n    depends: [ \"core\" ]\n};\n\n(function ($, undefined) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        DEFAULTMIN = 0,\n        DEFAULTMAX = 100,\n        DEFAULTVALUE = 0,\n        DEFAULTCHUNKCOUNT = 5,\n        KPROGRESSBAR = \"k-progressbar\",\n        KPROGRESSBARREVERSE = \"k-progressbar-reverse\",\n        KPROGRESSBARINDETERMINATE = \"k-progressbar-indeterminate\",\n        KPROGRESSBARCOMPLETE = \"k-complete\",\n        KPROGRESSWRAPPER = \"k-state-selected\",\n        KPROGRESSSTATUS = \"k-progress-status\",\n        LABEL_POSITION_END = \"k-progress-end\",\n        KCOMPLETEDCHUNK = \"k-state-selected\",\n        STATEDISABLED = \"k-state-disabled\",\n        PROGRESSTYPE = {\n            VALUE: \"value\",\n            PERCENT: \"percent\",\n            CHUNK: \"chunk\"\n        },\n        CHANGE = \"change\",\n        COMPLETE = \"complete\",\n        BOOLEAN = \"boolean\",\n        math = Math,\n        extend = $.extend,\n        proxy = $.proxy,\n        HUNDREDPERCENT = 100,\n        DEFAULTANIMATIONDURATION = 400,\n        PRECISION = 3,\n        templates = {\n            progressStatus: \"<span class='k-progress-status-wrap \" + LABEL_POSITION_END + \"'><span class='k-progress-status'></span></span>\",\n            announceElement: '<span aria-live=\"polite\" class=\"k-sr-only k-progress-announce\"></span>'\n        };\n\n    var ProgressBar = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            Widget.fn.init.call(this, element, options);\n\n            options = that.options;\n\n            that._progressProperty = (options.orientation === HORIZONTAL) ? \"width\" : \"height\";\n\n            that._fields();\n\n            options.value = that._validateValue(options.value);\n\n            that._validateType(options.type);\n\n            that._wrapper();\n\n            if(options.ariaRole) {\n                that._aria();\n            }\n\n            that._progressAnimation();\n\n            if ((options.value !== options.min) && (options.value !== false)) {\n               that._updateProgress();\n            }\n        },\n\n        setOptions: function(options) {\n            var that = this,\n                wrapper = that.wrapper;\n\n            Widget.fn.setOptions.call(that, options);\n\n            if (options.hasOwnProperty(\"reverse\")) {\n                wrapper.toggleClass(\"k-progressbar-reverse\", options.reverse);\n            }\n\n            if (options.hasOwnProperty(\"enable\")) {\n                that.enable(options.enable);\n            }\n\n            if(options.ariaRole) {\n                that._aria();\n            }\n\n            that._progressAnimation();\n\n            that._validateValue();\n\n            that._updateProgress();\n        },\n\n        events: [\n            CHANGE,\n            COMPLETE\n        ],\n\n        options: {\n            name: \"ProgressBar\",\n            orientation: HORIZONTAL,\n            reverse: false,\n            min: DEFAULTMIN,\n            max: DEFAULTMAX,\n            value: DEFAULTVALUE,\n            enable: true,\n            type: PROGRESSTYPE.VALUE,\n            chunkCount: DEFAULTCHUNKCOUNT,\n            showStatus: true,\n            animation: { },\n            label: null,\n            labelId: null,\n            ariaRole: false\n        },\n\n        _aria: function() {\n            var that = this,\n                options = that.options,\n                wrapper = that.wrapper;\n\n            wrapper.attr({\n                \"role\": \"progressbar\",\n                \"aria-valuemin\": options.min,\n                \"aria-valuemax\": options.max\n            });\n\n            if(!!options.labelId) {\n                wrapper.attr(\"aria-labelledby\", options.labelId);\n            } else if(!!options.label) {\n                wrapper.attr(\"aria-label\", options.label);\n            }\n\n            that.announce = $(templates.announceElement);\n            that.announce.appendTo($(\"body\"));\n\n            if(options.value !== false) {\n                wrapper.attr(\"aria-valuenow\", options.value);\n\n                that.announce.text(that._calculatePercentage().toFixed() + \"%\");\n            }\n        },\n\n        _fields: function() {\n            var that = this;\n\n            that._isStarted = false;\n\n            that.progressWrapper = that.progressStatus = $();\n        },\n\n        _validateType: function(currentType) {\n            var isValid = false;\n\n            $.each(PROGRESSTYPE, function(k, type) {\n                if (type === currentType) {\n                    isValid = true;\n                    return false;\n                }\n            });\n\n            if (!isValid) {\n                throw new Error(kendo.format(\"Invalid ProgressBar type '{0}'\", currentType));\n            }\n        },\n\n        _wrapper: function() {\n            var that = this;\n            var container = that.wrapper = that.element;\n            var options = that.options;\n            var orientation = options.orientation;\n            var initialValue = (options.value !== false) ? options.value : options.min;\n\n            container.addClass(\"k-widget \" + KPROGRESSBAR);\n\n            container.addClass(KPROGRESSBAR + \"-\" + ((orientation === HORIZONTAL) ? HORIZONTAL : VERTICAL));\n\n            if(options.enable === false) {\n                container.addClass(STATEDISABLED);\n            }\n\n            if (options.reverse) {\n                container.addClass(KPROGRESSBARREVERSE);\n            }\n\n            if (options.value === false) {\n                container.addClass(KPROGRESSBARINDETERMINATE);\n            }\n\n            if (options.type === PROGRESSTYPE.CHUNK) {\n                that._addChunkProgressWrapper();\n            } else {\n                if (options.showStatus){\n                    that.progressStatus = that.wrapper.prepend(templates.progressStatus)\n                                              .find(\".\" + KPROGRESSSTATUS);\n\n                    if (options.type === PROGRESSTYPE.VALUE) {\n                        that.progressStatus.text(initialValue);\n                    } else {\n                        that.progressStatus.text(that._calculatePercentage(initialValue).toFixed() + \"%\");\n                    }\n                }\n            }\n        },\n\n        value: function(value) {\n            return this._value(value);\n        },\n\n        _value: function(value){\n            var that = this;\n            var options = that.options;\n            var validated;\n\n            if (value === undefined) {\n                return options.value;\n            } else {\n                if (typeof value !== BOOLEAN) {\n                    value = that._roundValue(value);\n\n                    if(!isNaN(value)) {\n                        validated = that._validateValue(value);\n\n                        if (validated !== options.value) {\n                            that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);\n\n                            options.value = validated;\n\n                            that._isStarted = true;\n\n                            that._updateProgress();\n                        }\n                    }\n                } else if (!value) {\n                    that.wrapper.addClass(KPROGRESSBARINDETERMINATE);\n                    that.wrapper.removeAttr(\"aria-valuenow\");\n                    options.value = false;\n\n                    if(that.announce) {\n                        that.announce.text(\"\");\n                    }\n                }\n            }\n        },\n\n        _roundValue: function(value) {\n             value = parseFloat(value);\n\n             var power = math.pow(10, PRECISION);\n\n             return kendo._round(value * power) / power;\n        },\n\n        _validateValue: function(value) {\n            var that = this;\n            var options = that.options;\n\n            if (value !== false) {\n                if (value <= options.min || value === true) {\n                    return options.min;\n                } else if (value >= options.max) {\n                    return options.max;\n                }\n            } else if (value === false) {\n                return false;\n            }\n\n            if(isNaN(that._roundValue(value))) {\n                return options.min;\n            }\n\n            return value;\n        },\n\n        _updateProgress: function() {\n            var that = this;\n            var options = that.options;\n            var percentage = that._calculatePercentage();\n\n            if (options.type === PROGRESSTYPE.CHUNK) {\n                that._updateChunks(percentage);\n                that._onProgressUpdateAlways(options.value);\n            } else {\n                that._updateProgressWrapper(percentage);\n            }\n\n            if(options.ariaRole) {\n                that.wrapper.attr(\"aria-valuenow\", that.options.value);\n\n                if(that.announce) {\n                    that.announce.text(percentage.toFixed() + \"%\");\n                }\n            }\n        },\n\n        _updateChunks: function(percentage) {\n            var that = this;\n            var options = that.options;\n            var chunkCount = options.chunkCount;\n            var percentagesPerChunk =  parseInt((HUNDREDPERCENT / chunkCount) * 100, 10) / 100;\n            var percentageParsed = parseInt(percentage * 100, 10) / 100;\n            var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);\n            var completedChunks;\n\n            if((options.orientation === HORIZONTAL && !(options.reverse)) ||\n               (options.orientation === VERTICAL && options.reverse)) {\n                completedChunks = that.wrapper.find(\"li.k-item\").slice(0, completedChunksCount);\n            } else if(completedChunksCount === 0) {\n                completedChunks = kendo.jQuery();\n            } else {\n                completedChunks = that.wrapper.find(\"li.k-item\").slice(completedChunksCount * -1);\n            }\n\n            that.wrapper.find(\".\" + KCOMPLETEDCHUNK)\n                        .removeClass(KCOMPLETEDCHUNK);\n\n            completedChunks.addClass(KCOMPLETEDCHUNK);\n        },\n\n        _updateProgressWrapper: function(percentage) {\n            var that = this;\n            var options = that.options;\n            var progressWrapper = that.wrapper.find(\".\" + KPROGRESSWRAPPER);\n            var animationDuration = that._isStarted ? that._animation.duration : 0;\n            var animationCssOptions = { };\n\n            if (progressWrapper.length === 0) {\n                that._addRegularProgressWrapper();\n            }\n\n            animationCssOptions[that._progressProperty] = percentage + \"%\";\n            that.progressWrapper.animate(animationCssOptions, {\n                duration: animationDuration,\n                start: proxy(that._onProgressAnimateStart, that),\n                progress: proxy(that._onProgressAnimate, that),\n                complete: proxy(that._onProgressAnimateComplete, that, options.value),\n                always: proxy(that._onProgressUpdateAlways, that, options.value)\n            });\n        },\n\n        _onProgressAnimateStart: function() {\n            this.progressWrapper.show();\n        },\n\n        _onProgressAnimate: function(e) {\n            var that = this;\n            var options = that.options;\n            var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);\n            var progressStatusWrapSize;\n\n            if (options.showStatus) {\n                progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n\n                that.progressWrapper.find(\".k-progress-status-wrap\").css(that._progressProperty, progressStatusWrapSize + \"%\");\n            }\n\n            if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {\n                that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);\n            }\n        },\n\n        _onProgressAnimateComplete: function(currentValue) {\n            var that = this;\n            var options = that.options;\n            var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n            var progressValue;\n\n            if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {\n                that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);\n            }\n\n            if (options.showStatus) {\n                if (options.type === PROGRESSTYPE.VALUE) {\n                    progressValue = currentValue;\n                } else if (options.type == PROGRESSTYPE.PERCENT) {\n                    progressValue = that._calculatePercentage(currentValue).toFixed() + \"%\";\n                } else {\n                    progressValue = math.floor(that._calculatePercentage(currentValue)) + \"%\";\n                }\n                that.progressStatus.text(progressValue);\n            }\n\n            if (currentValue === options.min) {\n                that.progressWrapper.hide();\n            }\n        },\n\n        _onProgressUpdateAlways: function(currentValue) {\n            var that = this;\n            var options = that.options;\n\n            if (that._isStarted) {\n                that.trigger(CHANGE, { value: currentValue });\n            }\n\n            if (currentValue === options.max && that._isStarted) {\n                that.trigger(COMPLETE, { value: options.max });\n            }\n        },\n\n        enable: function(enable) {\n            var that = this;\n            var options = that.options;\n\n            options.enable = typeof(enable) === \"undefined\" ? true : enable;\n            that.wrapper.toggleClass(STATEDISABLED, !options.enable);\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if(that.announce) {\n                that.announce.remove();\n            }\n\n            Widget.fn.destroy.call(that);\n        },\n\n        _addChunkProgressWrapper: function () {\n            var that = this;\n            var options = that.options;\n            var container = that.wrapper;\n            var chunkSize = HUNDREDPERCENT / options.chunkCount;\n            var html = \"\";\n\n            if (options.chunkCount <= 1) {\n                options.chunkCount = 1;\n            }\n\n            html += \"<ul class='k-reset'>\";\n            for (var i = options.chunkCount - 1; i >= 0; i--) {\n                html += \"<li class='k-item'></li>\";\n            }\n            html += \"</ul>\";\n\n            container.append(html).find(\".k-item\").css(that._progressProperty, chunkSize + \"%\")\n                     .first().addClass(\"k-first\")\n                     .end()\n                     .last().addClass(\"k-last\");\n\n            that._normalizeChunkSize();\n        },\n\n        _normalizeChunkSize: function() {\n            var that = this;\n            var options = that.options;\n            var lastChunk = that.wrapper.find(\".k-item\").last();\n            var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);\n            var difference = HUNDREDPERCENT - (options.chunkCount * currentSize);\n\n            if (difference > 0) {\n                lastChunk.css(that._progressProperty, (currentSize + difference) + \"%\");\n            }\n        },\n\n        _addRegularProgressWrapper: function() {\n            var that = this;\n\n            that.progressWrapper = $(\"<div class='\" + KPROGRESSWRAPPER + \"'></div>\").appendTo(that.wrapper);\n\n            if (that.options.showStatus) {\n                that.progressWrapper.append(templates.progressStatus);\n\n                that.progressStatus = that.wrapper.find(\".\" + KPROGRESSSTATUS);\n            }\n        },\n\n        _calculateChunkSize: function() {\n            var that = this;\n            var chunkCount = that.options.chunkCount;\n            var chunkContainer = that.wrapper.find(\"ul.k-reset\");\n\n            return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;\n        },\n\n        _calculatePercentage: function(currentValue) {\n            var that = this;\n            var options = that.options;\n            var value = (currentValue !== undefined) ? currentValue : options.value;\n            var min = options.min;\n            var max = options.max;\n            that._onePercent = math.abs((max - min) / 100);\n\n            return math.abs((value - min) / that._onePercent);\n        },\n\n        _progressAnimation: function() {\n            var that = this;\n            var options = that.options;\n            var animation = options.animation;\n\n            if (animation === false) {\n                that._animation = { duration: 0 };\n            } else {\n                that._animation = extend({\n                    duration: DEFAULTANIMATIONDURATION\n                }, options.animation);\n            }\n        }\n    });\n\n    kendo.ui.plugin(ProgressBar);\n})(window.kendo.jQuery);\n\nreturn window.kendo;\n\n}, typeof define == 'function' && define.amd ? define : function(a1, a2, a3){ (a3 || a2)(); });\n\n"],"names":["define","__meta__","id","name","category","description","depends","$","window","kendo","jQuery","undefined","ui","Widget","HORIZONTAL","VERTICAL","DEFAULTMIN","DEFAULTMAX","DEFAULTVALUE","DEFAULTCHUNKCOUNT","KPROGRESSBAR","KPROGRESSBARREVERSE","KPROGRESSBARINDETERMINATE","KPROGRESSBARCOMPLETE","KPROGRESSWRAPPER","KPROGRESSSTATUS","LABEL_POSITION_END","KCOMPLETEDCHUNK","STATEDISABLED","PROGRESSTYPE","VALUE","PERCENT","CHUNK","CHANGE","COMPLETE","BOOLEAN","math","Math","extend","proxy","HUNDREDPERCENT","DEFAULTANIMATIONDURATION","PRECISION","templates","progressStatus","announceElement","ProgressBar","init","element","options","that","this","fn","call","_progressProperty","orientation","_fields","value","_validateValue","_validateType","type","_wrapper","ariaRole","_aria","_progressAnimation","min","_updateProgress","setOptions","wrapper","hasOwnProperty","toggleClass","reverse","enable","events","max","chunkCount","showStatus","animation","label","labelId","attr","role","aria-valuemin","aria-valuemax","announce","appendTo","text","_calculatePercentage","toFixed","_isStarted","progressWrapper","currentType","isValid","each","k","Error","format","container","initialValue","addClass","_addChunkProgressWrapper","prepend","find","_value","validated","_roundValue","isNaN","removeClass","removeAttr","parseFloat","power","pow","_round","percentage","_updateChunks","_onProgressUpdateAlways","_updateProgressWrapper","percentagesPerChunk","parseInt","percentageParsed","completedChunksCount","floor","completedChunks","slice","animationDuration","_animation","duration","animationCssOptions","length","_addRegularProgressWrapper","animate","start","_onProgressAnimateStart","progress","_onProgressAnimate","complete","_onProgressAnimateComplete","always","show","e","progressInPercent","elem","style","progressStatusWrapSize","css","currentValue","progressWrapperSize","progressValue","hide","trigger","destroy","remove","chunkSize","html","i","append","first","end","last","_normalizeChunkSize","lastChunk","currentSize","difference","_calculateChunkSize","chunkContainer","_onePercent","abs","plugin","amd","a1","a2","a3"],"mappings":"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"}